/*
* generated by Xtext
*/
grammar InternalV0;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.svlang.v0.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.svlang.v0.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.svlang.v0.services.V0GrammarAccess;

}

@parser::members {
 
 	private V0GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(V0GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel 
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
(rule__Domainmodel__ElementsAssignment)*
{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRootElement
entryRuleRootElement 
:
{ before(grammarAccess.getRootElementRule()); }
	 ruleRootElement
{ after(grammarAccess.getRootElementRule()); } 
	 EOF 
;

// Rule RootElement
ruleRootElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootElementAccess().getGroup()); }
(rule__RootElement__Group__0)
{ after(grammarAccess.getRootElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMain
entryRuleMain 
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainAccess().getGroup()); }
(rule__Main__Group__0)
{ after(grammarAccess.getMainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFun
entryRuleFun 
:
{ before(grammarAccess.getFunRule()); }
	 ruleFun
{ after(grammarAccess.getFunRule()); } 
	 EOF 
;

// Rule Fun
ruleFun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunAccess().getGroup()); }
(rule__Fun__Group__0)
{ after(grammarAccess.getFunAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunCall
entryRuleFunCall 
:
{ before(grammarAccess.getFunCallRule()); }
	 ruleFunCall
{ after(grammarAccess.getFunCallRule()); } 
	 EOF 
;

// Rule FunCall
ruleFunCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunCallAccess().getGroup()); }
(rule__FunCall__Group__0)
{ after(grammarAccess.getFunCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrintln
entryRulePrintln 
:
{ before(grammarAccess.getPrintlnRule()); }
	 rulePrintln
{ after(grammarAccess.getPrintlnRule()); } 
	 EOF 
;

// Rule Println
rulePrintln
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrintlnAccess().getGroup()); }
(rule__Println__Group__0)
{ after(grammarAccess.getPrintlnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getFunCallParserRuleCall_1()); }
	ruleFunCall
{ after(grammarAccess.getExpressionAccess().getFunCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getPrintlnParserRuleCall_2()); }
	rulePrintln
{ after(grammarAccess.getExpressionAccess().getPrintlnParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RootElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootElement__Group__0__Impl
	rule__RootElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getMainAssignment_0()); }
(rule__RootElement__MainAssignment_0)
{ after(grammarAccess.getRootElementAccess().getMainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getFunsAssignment_1()); }
(rule__RootElement__FunsAssignment_1)*
{ after(grammarAccess.getRootElementAccess().getFunsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Main__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getMainKeyword_0()); }

	'main {' 

{ after(grammarAccess.getMainAccess().getMainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
(rule__Main__ExpressionsAssignment_1)*
{ after(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getMainAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fun__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__0__Impl
	rule__Fun__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getFunKeyword_0()); }

	'fun ' 

{ after(grammarAccess.getFunAccess().getFunKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__1__Impl
	rule__Fun__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getNameAssignment_1()); }
(rule__Fun__NameAssignment_1)
{ after(grammarAccess.getFunAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__2__Impl
	rule__Fun__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_2()); }

	' {' 

{ after(grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__3__Impl
	rule__Fun__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getExpressionsAssignment_3()); }
(rule__Fun__ExpressionsAssignment_3)*
{ after(grammarAccess.getFunAccess().getExpressionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
(rule__Assignment__NameAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_1()); }

	' = ' 

{ after(grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
(rule__Assignment__ValueAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunCall__Group__0__Impl
	rule__FunCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunCallAccess().getNameAssignment_0()); }
(rule__FunCall__NameAssignment_0)
{ after(grammarAccess.getFunCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunCallAccess().getLeftParenthesisRightParenthesisKeyword_1()); }

	'()' 

{ after(grammarAccess.getFunCallAccess().getLeftParenthesisRightParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Println__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Println__Group__0__Impl
	rule__Println__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Println__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintlnAccess().getPlnKeyword_0()); }

	'pln(' 

{ after(grammarAccess.getPrintlnAccess().getPlnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Println__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Println__Group__1__Impl
	rule__Println__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Println__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPrintlnAccess().getValuesAssignment_1()); }
(rule__Println__ValuesAssignment_1)
{ after(grammarAccess.getPrintlnAccess().getValuesAssignment_1()); }
)
(
{ before(grammarAccess.getPrintlnAccess().getValuesAssignment_1()); }
(rule__Println__ValuesAssignment_1)*
{ after(grammarAccess.getPrintlnAccess().getValuesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Println__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Println__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Println__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintlnAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getPrintlnAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Domainmodel__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); }
	ruleRootElement{ after(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__MainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getMainMainParserRuleCall_0_0()); }
	ruleMain{ after(grammarAccess.getRootElementAccess().getMainMainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__FunsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getFunsFunParserRuleCall_1_0()); }
	ruleFun{ after(grammarAccess.getRootElementAccess().getFunsFunParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Main__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__ExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getAssignmentAccess().getValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunCallAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunCallAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Println__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintlnAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getPrintlnAccess().getValuesSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



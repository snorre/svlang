/*
* generated by Xtext
*/
grammar InternalV0;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.svlang.v0.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.svlang.v0.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.svlang.v0.services.V0GrammarAccess;

}

@parser::members {
 
 	private V0GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(V0GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel 
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
(rule__Domainmodel__ElementsAssignment)*
{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRootElement
entryRuleRootElement 
:
{ before(grammarAccess.getRootElementRule()); }
	 ruleRootElement
{ after(grammarAccess.getRootElementRule()); } 
	 EOF 
;

// Rule RootElement
ruleRootElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootElementAccess().getGroup()); }
(rule__RootElement__Group__0)
{ after(grammarAccess.getRootElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMain
entryRuleMain 
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainAccess().getGroup()); }
(rule__Main__Group__0)
{ after(grammarAccess.getMainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFun
entryRuleFun 
:
{ before(grammarAccess.getFunRule()); }
	 ruleFun
{ after(grammarAccess.getFunRule()); } 
	 EOF 
;

// Rule Fun
ruleFun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunAccess().getGroup()); }
(rule__Fun__Group__0)
{ after(grammarAccess.getFunAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
	ruleAssignment
{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomic
entryRuleAtomic 
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
(rule__Atomic__Alternatives)
{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleMyIntType
entryRuleMyIntType 
:
{ before(grammarAccess.getMyIntTypeRule()); }
	 ruleMyIntType
{ after(grammarAccess.getMyIntTypeRule()); } 
	 EOF 
;

// Rule MyIntType
ruleMyIntType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyIntTypeAccess().getGroup()); }
(rule__MyIntType__Group__0)
{ after(grammarAccess.getMyIntTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyStringType
entryRuleMyStringType 
:
{ before(grammarAccess.getMyStringTypeRule()); }
	 ruleMyStringType
{ after(grammarAccess.getMyStringTypeRule()); } 
	 EOF 
;

// Rule MyStringType
ruleMyStringType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyStringTypeAccess().getGroup()); }
(rule__MyStringType__Group__0)
{ after(grammarAccess.getMyStringTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Atomic__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
(rule__Atomic__Group_0__0)
{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
(rule__Atomic__Group_1__0)
{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
(rule__Atomic__Group_2__0)
{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicAccess().getGroup_3()); }
(rule__Atomic__Group_3__0)
{ after(grammarAccess.getAtomicAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RootElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootElement__Group__0__Impl
	rule__RootElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getMainAssignment_0()); }
(rule__RootElement__MainAssignment_0)
{ after(grammarAccess.getRootElementAccess().getMainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getFunsAssignment_1()); }
(rule__RootElement__FunsAssignment_1)*
{ after(grammarAccess.getRootElementAccess().getFunsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Main__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getMainKeyword_0()); }

	'main {' 

{ after(grammarAccess.getMainAccess().getMainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
(rule__Main__ExpressionsAssignment_1)
{ after(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
)
(
{ before(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
(rule__Main__ExpressionsAssignment_1)*
{ after(grammarAccess.getMainAccess().getExpressionsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Main__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getMainAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fun__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__0__Impl
	rule__Fun__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getFunAction_0()); }
(

)
{ after(grammarAccess.getFunAccess().getFunAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__1__Impl
	rule__Fun__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getFunKeyword_1()); }

	'fun ' 

{ after(grammarAccess.getFunAccess().getFunKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__2__Impl
	rule__Fun__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getNameAssignment_2()); }
(rule__Fun__NameAssignment_2)
{ after(grammarAccess.getFunAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__3__Impl
	rule__Fun__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getFunAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__4__Impl
	rule__Fun__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getReturnTypeAssignment_4()); }
(rule__Fun__ReturnTypeAssignment_4)
{ after(grammarAccess.getFunAccess().getReturnTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__5__Impl
	rule__Fun__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_5()); }

	' {' 

{ after(grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__6__Impl
	rule__Fun__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getExpressionsAssignment_6()); }
(rule__Fun__ExpressionsAssignment_6)*
{ after(grammarAccess.getFunAccess().getExpressionsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fun__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fun__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getFunAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getTypeAssignment_1()); }
(rule__Assignment__TypeAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameAssignment_2()); }
(rule__Assignment__NameAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
	rule__Assignment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_3()); }

	' = ' 

{ after(grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_4()); }
(rule__Assignment__ValueAssignment_4)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Atomic__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getSymbolRefAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
(rule__Atomic__SymbolAssignment_0_1)
{ after(grammarAccess.getAtomicAccess().getSymbolAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getNumberLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
(rule__Atomic__ValueAssignment_1_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getStringLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
(rule__Atomic__ValueAssignment_2_1)
{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atomic__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_3__0__Impl
	rule__Atomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunCallAction_3_0()); }
(

)
{ after(grammarAccess.getAtomicAccess().getFunCallAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_3__1__Impl
	rule__Atomic__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunAssignment_3_1()); }
(rule__Atomic__FunAssignment_3_1)
{ after(grammarAccess.getAtomicAccess().getFunAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atomic__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getLeftParenthesisRightParenthesisKeyword_3_2()); }

	'()' 

{ after(grammarAccess.getAtomicAccess().getLeftParenthesisRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MyIntType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIntType__Group__0__Impl
	rule__MyIntType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIntType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIntTypeAccess().getINTAction_0()); }
(

)
{ after(grammarAccess.getMyIntTypeAccess().getINTAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyIntType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyIntType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyIntType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIntTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getMyIntTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MyStringType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringType__Group__0__Impl
	rule__MyStringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringTypeAccess().getSTRINGAction_0()); }
(

)
{ after(grammarAccess.getMyStringTypeAccess().getSTRINGAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MyStringType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MyStringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyStringType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringTypeAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getMyStringTypeAccess().getStringKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Domainmodel__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); }
	ruleRootElement{ after(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__MainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getMainMainParserRuleCall_0_0()); }
	ruleMain{ after(grammarAccess.getRootElementAccess().getMainMainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootElement__FunsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootElementAccess().getFunsFunParserRuleCall_1_0()); }
	ruleFun{ after(grammarAccess.getRootElementAccess().getFunsFunParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Main__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__ReturnTypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getReturnTypeTypeCrossReference_4_0()); }
(
{ before(grammarAccess.getFunAccess().getReturnTypeTypeIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getFunAccess().getReturnTypeTypeIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getFunAccess().getReturnTypeTypeCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fun__ExpressionsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getTypeTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getTypeTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getTypeTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getTypeTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAtomicParserRuleCall_4_0()); }
	ruleAtomic{ after(grammarAccess.getAssignmentAccess().getValueAtomicParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__SymbolAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
(
{ before(grammarAccess.getAtomicAccess().getSymbolSymbolIDTerminalRuleCall_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getSymbolSymbolIDTerminalRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getSymbolSymbolCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__FunAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicAccess().getFunFunCrossReference_3_1_0()); }
(
{ before(grammarAccess.getAtomicAccess().getFunFunIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAtomicAccess().getFunFunIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getAtomicAccess().getFunFunCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/*
* generated by Xtext
*/
grammar InternalV0;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.svlang.v0.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.svlang.v0.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.svlang.v0.services.V0GrammarAccess;

}

@parser::members {

 	private V0GrammarAccess grammarAccess;
 	
    public InternalV0Parser(TokenStream input, V0GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";	
   	}
   	
   	@Override
   	protected V0GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	 iv_ruleDomainmodel=ruleDomainmodel 
	 { $current=$iv_ruleDomainmodel.current; } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleRootElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainmodelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"RootElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleRootElement
entryRuleRootElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootElementRule()); }
	 iv_ruleRootElement=ruleRootElement 
	 { $current=$iv_ruleRootElement.current; } 
	 EOF 
;

// Rule RootElement
ruleRootElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementAccess().getMainMainParserRuleCall_0_0()); 
	    }
		lv_main_0_0=ruleMain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementRule());
	        }
       		set(
       			$current, 
       			"main",
        		lv_main_0_0, 
        		"Main");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRootElementAccess().getFunsFunParserRuleCall_1_0()); 
	    }
		lv_funs_1_0=ruleFun		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootElementRule());
	        }
       		add(
       			$current, 
       			"funs",
        		lv_funs_1_0, 
        		"Fun");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='main {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFun
entryRuleFun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunRule()); }
	 iv_ruleFun=ruleFun 
	 { $current=$iv_ruleFun.current; } 
	 EOF 
;

// Rule Fun
ruleFun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fun ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunAccess().getFunKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=' {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_3_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFunCallParserRuleCall_1()); 
    }
    this_FunCall_1=ruleFunCall
    { 
        $current = $this_FunCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getPrintlnParserRuleCall_2()); 
    }
    this_Println_2=rulePrintln
    { 
        $current = $this_Println_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=' = ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAssignmentAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleFunCall
entryRuleFunCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunCallRule()); }
	 iv_ruleFunCall=ruleFunCall 
	 { $current=$iv_ruleFunCall.current; } 
	 EOF 
;

// Rule FunCall
ruleFunCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunCallAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunCallAccess().getLeftParenthesisRightParenthesisKeyword_1());
    }
)
;





// Entry rule entryRulePrintln
entryRulePrintln returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrintlnRule()); }
	 iv_rulePrintln=rulePrintln 
	 { $current=$iv_rulePrintln.current; } 
	 EOF 
;

// Rule Println
rulePrintln returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pln(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrintlnAccess().getPlnKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getPrintlnAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrintlnRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)+	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrintlnAccess().getRightParenthesisKeyword_2());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



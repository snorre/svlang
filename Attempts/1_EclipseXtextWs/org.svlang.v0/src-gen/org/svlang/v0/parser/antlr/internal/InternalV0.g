/*
* generated by Xtext
*/
grammar InternalV0;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.svlang.v0.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.svlang.v0.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.svlang.v0.services.V0GrammarAccess;

}

@parser::members {

 	private V0GrammarAccess grammarAccess;
 	
    public InternalV0Parser(TokenStream input, V0GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";	
   	}
   	
   	@Override
   	protected V0GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	 iv_ruleDomainmodel=ruleDomainmodel 
	 { $current=$iv_ruleDomainmodel.current; } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsRootElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleRootElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainmodelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"RootElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleRootElement
entryRuleRootElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootElementRule()); }
	 iv_ruleRootElement=ruleRootElement 
	 { $current=$iv_ruleRootElement.current; } 
	 EOF 
;

// Rule RootElement
ruleRootElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRootElementAccess().getMainParserRuleCall_0()); 
    }
    this_Main_0=ruleMain
    { 
        $current = $this_Main_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRootElementAccess().getFunParserRuleCall_1()); 
    }
    this_Fun_1=ruleFun
    { 
        $current = $this_Fun_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='main {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getMainAccess().getMainAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFun
entryRuleFun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunRule()); }
	 iv_ruleFun=ruleFun 
	 { $current=$iv_ruleFun.current; } 
	 EOF 
;

// Rule Fun
ruleFun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fun ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunAccess().getFunKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunAccess().getColonKeyword_2());
    }
(
(
		lv_retType_3_0=RULE_ID
		{
			newLeafNode(lv_retType_3_0, grammarAccess.getFunAccess().getRetTypeIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"retType",
        		lv_retType_3_0, 
        		"ID");
	    }

)
)	otherlv_4=' {' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunAccess().getSpaceLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunAccess().getExpressionsExpressionParserRuleCall_5_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFunCallParserRuleCall_1()); 
    }
    this_FunCall_1=ruleFunCall
    { 
        $current = $this_FunCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getReturnParserRuleCall_2()); 
    }
    this_Return_2=ruleReturn
    { 
        $current = $this_Return_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=' = ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getSpaceEqualsSignSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getValuePassableParserRuleCall_2_0()); 
	    }
		lv_value_2_0=rulePassable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Passable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunCall
entryRuleFunCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunCallRule()); }
	 iv_ruleFunCall=ruleFunCall 
	 { $current=$iv_ruleFunCall.current; } 
	 EOF 
;

// Rule FunCall
ruleFunCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunCallAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunCallAccess().getParametersPassableParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=rulePassable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Passable");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulePassable
entryRulePassable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPassableRule()); }
	 iv_rulePassable=rulePassable 
	 { $current=$iv_rulePassable.current; } 
	 EOF 
;

// Rule Passable
rulePassable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPassableAccess().getConstantsParserRuleCall_0()); 
    }
ruleConstants
    { 
        afterParserOrEnumRuleCall();
    }

    |this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getPassableAccess().getIDTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getPassableAccess().getFunCallParserRuleCall_2()); 
    }
    this_FunCall_2=ruleFunCall
    { 
        $current = $this_FunCall_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstants
entryRuleConstants returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantsRule()); } 
	 iv_ruleConstants=ruleConstants 
	 { $current=$iv_ruleConstants.current.getText(); }  
	 EOF 
;

// Rule Constants
ruleConstants returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getConstantsAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getConstantsAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getReturnAccess().getPassableParserRuleCall_1()); 
    }
    this_Passable_1=rulePassable
    { 
        $current = $this_Passable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



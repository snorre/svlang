/*
* generated by Xtext
*/
package org.svlang.v0.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class V0GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRootElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=RootElement*;
		public ParserRule getRule() { return rule; }

		//elements+=RootElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//RootElement
		public RuleCall getElementsRootElementParserRuleCall_0() { return cElementsRootElementParserRuleCall_0; }
	}

	public class RootElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RootElement:
		//	Main | Fun;
		public ParserRule getRule() { return rule; }

		//Main | Fun
		public Alternatives getAlternatives() { return cAlternatives; }

		//Main
		public RuleCall getMainParserRuleCall_0() { return cMainParserRuleCall_0; }

		//Fun
		public RuleCall getFunParserRuleCall_1() { return cFunParserRuleCall_1; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMainAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Main:
		//	"main {" {Main} expressions+=Expression* "}";
		public ParserRule getRule() { return rule; }

		//"main {" {Main} expressions+=Expression* "}"
		public Group getGroup() { return cGroup; }

		//"main {"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//{Main}
		public Action getMainAction_1() { return cMainAction_1; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRetTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRetTypeIDTerminalRuleCall_3_0 = (RuleCall)cRetTypeAssignment_3.eContents().get(0);
		private final Keyword cSpaceLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionsExpressionParserRuleCall_5_0 = (RuleCall)cExpressionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Fun:
		//	"fun " name=ID ":" retType=ID " {" expressions+=Expression* "}";
		public ParserRule getRule() { return rule; }

		//"fun " name=ID ":" retType=ID " {" expressions+=Expression* "}"
		public Group getGroup() { return cGroup; }

		//"fun "
		public Keyword getFunKeyword_0() { return cFunKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//retType=ID
		public Assignment getRetTypeAssignment_3() { return cRetTypeAssignment_3; }

		//ID
		public RuleCall getRetTypeIDTerminalRuleCall_3_0() { return cRetTypeIDTerminalRuleCall_3_0; }

		//" {"
		public Keyword getSpaceLeftCurlyBracketKeyword_4() { return cSpaceLeftCurlyBracketKeyword_4; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_5() { return cExpressionsAssignment_5; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_5_0() { return cExpressionsExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//	Assignment | FunCall | Return;
		public ParserRule getRule() { return rule; }

		//Assignment | FunCall | Return
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//FunCall
		public RuleCall getFunCallParserRuleCall_1() { return cFunCallParserRuleCall_1; }

		//Return
		public RuleCall getReturnParserRuleCall_2() { return cReturnParserRuleCall_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSpaceEqualsSignSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePassableParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	name=ID " = " value=Passable;
		public ParserRule getRule() { return rule; }

		//name=ID " = " value=Passable
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//" = "
		public Keyword getSpaceEqualsSignSpaceKeyword_1() { return cSpaceEqualsSignSpaceKeyword_1; }

		//value=Passable
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Passable
		public RuleCall getValuePassableParserRuleCall_2_0() { return cValuePassableParserRuleCall_2_0; }
	}

	public class FunCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersPassableParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunCall:
		//	name=ID "(" parameters+=Passable* ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameters+=Passable* ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=Passable*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Passable
		public RuleCall getParametersPassableParserRuleCall_2_0() { return cParametersPassableParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PassableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Passable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Passable:
		//	Constants | ID | FunCall;
		public ParserRule getRule() { return rule; }

		//Constants | ID | FunCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constants
		public RuleCall getConstantsParserRuleCall_0() { return cConstantsParserRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//FunCall
		public RuleCall getFunCallParserRuleCall_2() { return cFunCallParserRuleCall_2; }
	}

	public class ConstantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constants");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constants:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPassableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Return:
		//	"return " Passable;
		public ParserRule getRule() { return rule; }

		//"return " Passable
		public Group getGroup() { return cGroup; }

		//"return "
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//Passable
		public RuleCall getPassableParserRuleCall_1() { return cPassableParserRuleCall_1; }
	}
	
	
	private DomainmodelElements pDomainmodel;
	private RootElementElements pRootElement;
	private MainElements pMain;
	private FunElements pFun;
	private ExpressionElements pExpression;
	private AssignmentElements pAssignment;
	private FunCallElements pFunCall;
	private PassableElements pPassable;
	private ConstantsElements pConstants;
	private ReturnElements pReturn;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public V0GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.svlang.v0.V0".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=RootElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return (pDomainmodel != null) ? pDomainmodel : (pDomainmodel = new DomainmodelElements());
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//RootElement:
	//	Main | Fun;
	public RootElementElements getRootElementAccess() {
		return (pRootElement != null) ? pRootElement : (pRootElement = new RootElementElements());
	}
	
	public ParserRule getRootElementRule() {
		return getRootElementAccess().getRule();
	}

	//Main:
	//	"main {" {Main} expressions+=Expression* "}";
	public MainElements getMainAccess() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//Fun:
	//	"fun " name=ID ":" retType=ID " {" expressions+=Expression* "}";
	public FunElements getFunAccess() {
		return (pFun != null) ? pFun : (pFun = new FunElements());
	}
	
	public ParserRule getFunRule() {
		return getFunAccess().getRule();
	}

	//Expression:
	//	Assignment | FunCall | Return;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment:
	//	name=ID " = " value=Passable;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//FunCall:
	//	name=ID "(" parameters+=Passable* ")";
	public FunCallElements getFunCallAccess() {
		return (pFunCall != null) ? pFunCall : (pFunCall = new FunCallElements());
	}
	
	public ParserRule getFunCallRule() {
		return getFunCallAccess().getRule();
	}

	//Passable:
	//	Constants | ID | FunCall;
	public PassableElements getPassableAccess() {
		return (pPassable != null) ? pPassable : (pPassable = new PassableElements());
	}
	
	public ParserRule getPassableRule() {
		return getPassableAccess().getRule();
	}

	//Constants:
	//	INT | STRING;
	public ConstantsElements getConstantsAccess() {
		return (pConstants != null) ? pConstants : (pConstants = new ConstantsElements());
	}
	
	public ParserRule getConstantsRule() {
		return getConstantsAccess().getRule();
	}

	//Return:
	//	"return " Passable;
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

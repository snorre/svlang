/*
 * generated by Xtext
 */
package org.svlang.v0.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject

import org.svlang.v0.v0.RootElement
import org.svlang.v0.v0.Main
import org.svlang.v0.v0.Fun

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class V0Generator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (re: resource.allContents.toIterable.filter(RootElement)) {
			fsa.generateFile("all.java",
				'''
					package org.svlang.v0.fixme
					
					''' + re.main.compile + '''
					
					''' + re.funs.compile + '''
				'''
			)
		}
	}
	
	def compile(Main m) '''
	public static void Main(string[] args) {
		«FOR e : m.expressions»
		  	«e.compile»
		  «ENDFOR»
	} 
	'''
	
	def compile(Fun f) '''
	public static «f.retType» «f.name»() {
	}
	'''
}

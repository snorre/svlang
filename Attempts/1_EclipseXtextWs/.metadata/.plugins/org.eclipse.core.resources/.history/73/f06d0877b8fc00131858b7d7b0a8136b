/*
 * generated by Xtext
 */
package org.svlang.v0.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject

import org.svlang.v0.v0.RootElement
import org.svlang.v0.v0.Main
import org.svlang.v0.v0.Fun
import org.svlang.v0.v0.Expression
import org.svlang.v0.v0.Assignment
import org.svlang.v0.v0.FunCall
import org.svlang.v0.v0.Return
import org.svlang.v0.v0.Passable


/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class V0Generator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (re: resource.allContents.toIterable.filter(RootElement)) {
			fsa.generateFile("All.java",
				'''
				public class All {
					
					«re.main.compile»
					«FOR f : re.funs»
						«f.compile»
					«ENDFOR»
				}
				'''
			)
		}
	}
	
	def compile(Main m) '''
	public static void Main(String[] args) {
		«FOR e : m.expressions»
			«e.compile»
	  	«ENDFOR»
	} 
	'''
	
	def compile(Fun f) '''
	public static «f.retType» «f.name»() {
		«FOR e : f.expressions»
			«e.compile»
	  	«ENDFOR»
	}
	'''
	
	def compile(Expression e) {
		switch e {
			Assignment : {
				'''final int «e.name» = «e.value.compile»;'''
			}
			
			FunCall : {
				''' '''
			}
			
			Return : {
				''' '''
			}
		}
	}
	
	def compile(Passable p) {
		switch p {
			INT : {
				p
			}
			
			STRING : {
				''' '''
			}
			*/
			
			FunCall : {
				''' '''
			}
		}
	}
}
